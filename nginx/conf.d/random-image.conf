server {
    listen 80 default_server;
    server_name _;  # Catch all server name

    root /var/www/images;

    # Basic security headers
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";

    location / {
        limit_req zone=one burst=10 nodelay;
        default_type text/html;
        content_by_lua_block {
            -- Generate random query parameter to prevent caching
            math.randomseed(ngx.time() * 1000)
            local random_value = math.random(100000, 999999)
            
            -- Configuration for tooltip
            local tooltip_text = "Powered by github.com/drewherron/random-image-server"
            local repo_url = "https://github.com/drewherron/random-image-server"

            -- Output HTML in multiple parts to avoid long strings
            ngx.say("<!DOCTYPE html>")
            ngx.say("<html>")
            ngx.say("<head>")
            ngx.say("<title>Random Image</title>")
            ngx.say("<style>")
            ngx.say("body {")
            ngx.say("    margin: 0;")
            ngx.say("    padding: 0;")
            ngx.say("    background-color: #000;")
            ngx.say("    display: flex;")
            ngx.say("    justify-content: center;")
            ngx.say("    align-items: center;")
            ngx.say("    height: 100vh;")
            ngx.say("    position: relative;")
            ngx.say("}")
            ngx.say("img {")
            ngx.say("    display: block;")
            ngx.say("    width: 800px;")
            ngx.say("    height: 600px;")
            ngx.say("    margin: 0 auto;")
            ngx.say("    border: none;")
            ngx.say("    background: none;")
            ngx.say("    object-fit: contain;")
            ngx.say("    box-shadow: none;")
            ngx.say("}")
            ngx.say(".attribution {")
            ngx.say("    position: fixed;")
            ngx.say("    bottom: 10px;")
            ngx.say("    right: 10px;")
            ngx.say("    z-index: 1000;")
            ngx.say("    font-family: Arial, sans-serif;")
            ngx.say("    font-size: 12px;")
            ngx.say("}")
            ngx.say(".info-icon {")
            ngx.say("    width: 24px;")
            ngx.say("    height: 24px;")
            ngx.say("    opacity: 0.6;")
            ngx.say("    transition: all 0.3s;")
            ngx.say("    display: block;")
            ngx.say("}")
            ngx.say(".text-info {")
            ngx.say("    display: none;")
            ngx.say("    background-color: rgba(0, 0, 0, 0.7);")
            ngx.say("    color: white;")
            ngx.say("    padding: 5px 10px;")
            ngx.say("    border-radius: 4px;")
            ngx.say("    white-space: nowrap;")
            ngx.say("    text-decoration: none;")
            ngx.say("    transition: background-color 0.3s;")
            ngx.say("}")
            ngx.say(".attribution:hover .info-icon {")
            ngx.say("    display: none;")
            ngx.say("}")
            ngx.say(".attribution:hover .text-info {")
            ngx.say("    display: block;")
            ngx.say("}")
            ngx.say(".text-info:hover {")
            ngx.say("    background-color: rgba(0, 0, 0, 0.9);")
            ngx.say("}")

            -- CSS for Bitcoin attribution (commented out)
            ngx.say("/* ")
            ngx.say(".bitcoin-attribution {")
            ngx.say("    cursor: default;")
            ngx.say("}")
            ngx.say(".bitcoin-info {")
            ngx.say("    display: none;")
            ngx.say("    background-color: rgba(0, 0, 0, 0.8);")
            ngx.say("    color: white;")
            ngx.say("    padding: 8px 12px;")
            ngx.say("    border-radius: 4px;")
            ngx.say("    white-space: nowrap;")
            ngx.say("    font-family: monospace;")
            ngx.say("    position: relative;")
            ngx.say("}")
            ngx.say(".bitcoin-attribution:hover .info-icon {")
            ngx.say("    display: none;")
            ngx.say("}")
            ngx.say(".bitcoin-attribution:hover .bitcoin-info {")
            ngx.say("    display: flex;")
            ngx.say("    align-items: center;")
            ngx.say("}")
            ngx.say(".btc-text {")
            ngx.say("    font-weight: bold;")
            ngx.say("    margin-right: 4px;")
            ngx.say("}")
            ngx.say(".copy-btn {")
            ngx.say("    background: none;")
            ngx.say("    border: none;")
            ngx.say("    color: #999;")
            ngx.say("    cursor: pointer;")
            ngx.say("    padding: 2px 4px;")
            ngx.say("    margin-left: 8px;")
            ngx.say("    transition: color 0.2s;")
            ngx.say("}")
            ngx.say(".copy-btn:hover {")
            ngx.say("    color: white;")
            ngx.say("}")
            ngx.say("#copy-notification {")
            ngx.say("    position: absolute;")
            ngx.say("    right: 8px;")
            ngx.say("    top: -25px;")
            ngx.say("    background-color: rgba(0, 0, 0, 0.8);")
            ngx.say("    color: #4aafff;")
            ngx.say("    padding: 4px 8px;")
            ngx.say("    border-radius: 4px;")
            ngx.say("    font-size: 11px;")
            ngx.say("    opacity: 0;")
            ngx.say("    transition: opacity 0.3s;")
            ngx.say("}")
            ngx.say("*/")
            ngx.say("</style>")
            ngx.say("</head>")
            ngx.say("<body>")
            ngx.say(string.format('<img src="/random-image?v=%s" alt="Random Image" />', random_value))
            ngx.say('<a href="' .. repo_url .. '" target="_blank" class="attribution">')
            ngx.say('  <img src="/question-mark.png" alt="?" class="info-icon" />')
            ngx.say('  <span class="text-info">' .. tooltip_text .. '</span>')
            ngx.say('</a>')

            -- [[
            -- BITCOIN ADDRESS ATTRIBUTION WITH COPY FEATURE
            -- Uncomment this section and comment out the above attribution to use
            -- Customize the Bitcoin address and adjust styling as needed
            --
            -- ngx.say('<div class="attribution bitcoin-attribution">')
            -- ngx.say('  <img src="/question-mark.png" alt="?" class="info-icon" />')
            -- ngx.say('  <div class="bitcoin-info">')
            -- ngx.say('    <span class="btc-text">BTC: </span>')
            -- ngx.say('    <span id="btc-address">bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh</span>')
            -- ngx.say('    <button onclick="copyToClipboard()" class="copy-btn" title="Copy to clipboard">')
            -- ngx.say('      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">')
            -- ngx.say('        <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>')
            -- ngx.say('        <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>')
            -- ngx.say('      </svg>')
            -- ngx.say('    </button>')
            -- ngx.say('    <span id="copy-notification">Copied!</span>')
            -- ngx.say('  </div>')
            -- ngx.say('</div>')
            --
            -- ngx.say('<script>')
            -- ngx.say('  function copyToClipboard() {')
            -- ngx.say('    const address = document.getElementById("btc-address").textContent;')
            -- ngx.say('    navigator.clipboard.writeText(address)')
            -- ngx.say('      .then(() => {')
            -- ngx.say('        const notification = document.getElementById("copy-notification");')
            -- ngx.say('        notification.style.opacity = "1";')
            -- ngx.say('        setTimeout(() => {')
            -- ngx.say('          notification.style.opacity = "0";')
            -- ngx.say('        }, 2000);')
            -- ngx.say('      })')
            -- ngx.say('      .catch(err => {')
            -- ngx.say('        console.error("Could not copy text: ", err);')
            -- ngx.say('      });')
            -- ngx.say('  }')
            -- ngx.say('</script>')
            -- ]]
            ngx.say("</body>")
            ngx.say("</html>")
        }
    }

    location /random-image {
        limit_req zone=one burst=10 nodelay;
        content_by_lua_block {
            local lfs = require("lfs")
            local files = {}
            local image_extensions = {jpg=true, jpeg=true, png=true, gif=true}

            -- Get all image files using lfs
            local function scan_dir(dir)
                for file in lfs.dir(dir) do
                    if file ~= "." and file ~= ".." then
                        local f = dir..'/'..file
                        local attr = lfs.attributes(f)
                        if attr.mode == "file" then
                            local ext = file:match("%.(%w+)$")
                            if ext and image_extensions[string.lower(ext)] then
                                table.insert(files, f)
                            end
                        end
                    end
                end
            end

            scan_dir("/var/www/images")

            if #files == 0 then
                ngx.status = ngx.HTTP_NOT_FOUND
                ngx.say("No images found")
                return
            end

            -- Select random image
            math.randomseed(ngx.time() * 1000 + ngx.worker.pid())
            math.random(); math.random(); math.random() -- Discard first few values
            local random_file = files[math.random(#files)]

            -- Determine content type
            local content_type = "application/octet-stream"
            if random_file:match("%.jpe?g$") then
                content_type = "image/jpeg"
            elseif random_file:match("%.png$") then
                content_type = "image/png"
            elseif random_file:match("%.gif$") then
                content_type = "image/gif"
            end

            -- Serve the file securely with cache control headers
            ngx.header.content_type = content_type
            ngx.header["Cache-Control"] = "no-cache, no-store, must-revalidate"
            ngx.header["Pragma"] = "no-cache"
            ngx.header["Expires"] = "0"
            ngx.exec("/" .. random_file:sub(string.len("/var/www/images/")+1))
        }
    }

    # Serve static files securely (for direct access only)
    location ~ \.(jpg|jpeg|png|gif)$ {
        # No caching for random image display
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        try_files $uri =404;
    }

    # Serve the question mark icon
    location = /question-mark.png {
        alias /var/www/static/question-mark.png;
        add_header Cache-Control "public, max-age=86400";
    }
}