server {
    listen 80 default_server;
    server_name _;  # Catch all server name

    root /var/www/images;

    # Basic security headers
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";

    location / {
        limit_req zone=one burst=10 nodelay;
        default_type text/html;
        content_by_lua_block {
            -- Generate random query parameter to prevent caching
            math.randomseed(ngx.time() * 1000)
            local random_value = math.random(100000, 999999)

            local page = string.format([[
            <!DOCTYPE html>
            <html>
            <head>
                <title>Random Image</title>
                <style>
                    body {
                        margin: 0;
                        padding: 0;
                        background-color: #000;
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        height: 100vh;
                    }
                    img {
                        display: block;
                        width: 800px;
                        height: 600px;
                        margin: 0 auto;
                        border: none;
                        background: none;
                        object-fit: contain;
                        box-shadow: none;
                    }
                </style>
            </head>
            <body>
                <img src="/random-image?v=%d" alt="Random Image" />
            </body>
            </html>
            ]], random_value)
            ngx.say(page)
        }
    }

    location /random-image {
        limit_req zone=one burst=10 nodelay;
        content_by_lua_block {
            local lfs = require("lfs")
            local files = {}
            local image_extensions = {jpg=true, jpeg=true, png=true, gif=true}

            -- Get all image files using lfs
            local function scan_dir(dir)
                for file in lfs.dir(dir) do
                    if file ~= "." and file ~= ".." then
                        local f = dir..'/'..file
                        local attr = lfs.attributes(f)
                        if attr.mode == "file" then
                            local ext = file:match("%.(%w+)$")
                            if ext and image_extensions[string.lower(ext)] then
                                table.insert(files, f)
                            end
                        end
                    end
                end
            end

            scan_dir("/var/www/images")

            if #files == 0 then
                ngx.status = ngx.HTTP_NOT_FOUND
                ngx.say("No images found")
                return
            end

            -- Select random image
            math.randomseed(ngx.time() * 1000 + ngx.worker.pid())
            math.random(); math.random(); math.random() -- Discard first few values
            local random_file = files[math.random(#files)]

            -- Determine content type
            local content_type = "application/octet-stream"
            if random_file:match("%.jpe?g$") then
                content_type = "image/jpeg"
            elseif random_file:match("%.png$") then
                content_type = "image/png"
            elseif random_file:match("%.gif$") then
                content_type = "image/gif"
            end

            -- Serve the file securely with cache control headers
            ngx.header.content_type = content_type
            ngx.header["Cache-Control"] = "no-cache, no-store, must-revalidate"
            ngx.header["Pragma"] = "no-cache"
            ngx.header["Expires"] = "0"
            ngx.exec("/" .. random_file:sub(string.len("/var/www/images/")+1))
        }
    }

    # Serve static files securely (for direct access only)
    location ~ \.(jpg|jpeg|png|gif)$ {
        # No caching for random image display
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
        try_files $uri =404;
    }
}